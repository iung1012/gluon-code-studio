import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.75.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface OpenRouterMessage {
  role: 'system' | 'user' | 'assistant';
  content: string | Array<{
    type: 'text' | 'image_url';
    text?: string;
    image_url?: {
      url: string;
    };
  }>;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('No authorization header');
    }

    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { global: { headers: { Authorization: authHeader } } }
    );

    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      console.error('Auth error:', userError);
      throw new Error('Unauthorized');
    }

    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('openrouter_api_key')
      .eq('id', user.id)
      .single();

    if (profileError || !profile?.openrouter_api_key) {
      console.error('‚ùå API key not configured for user:', user.id, 'Error:', profileError);
      return new Response(
        JSON.stringify({ error: 'Chave API n√£o configurada. Por favor, configure sua chave OpenRouter nas configura√ß√µes.' }),
        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const { 
      prompt, 
      currentCode, 
      images, 
      modelType = 'basic',
      isEdit = false,
      chatHistory = []
    } = await req.json();

    if (!prompt) {
      throw new Error('Prompt is required');
    }

    console.log('üìù Request:', { 
      userId: user.id, 
      promptLength: prompt.length, 
      isEdit, 
      hasImages: !!images?.length,
      modelType 
    });

    const basicModel = 'moonshotai/kimi-k2:free';
    const proModel = 'z-ai/glm-4.5-air';
    const visionModel = 'z-ai/glm-4.5-air';
    
    const hasImages = images && images.length > 0;
    const selectedModel = hasImages ? visionModel : (modelType === 'pro' ? proModel : basicModel);

    console.log(`üéØ Using model: ${selectedModel}`);

    let messages: OpenRouterMessage[];

    if (isEdit && currentCode) {
      // Build context from chat history
      let historyContext = '';
      if (chatHistory && chatHistory.length > 0) {
        historyContext = '\n\nHIST√ìRICO DE MODIFICA√á√ïES ANTERIORES:\n';
        chatHistory.forEach((msg: any) => {
          if (msg.role === 'user') {
            historyContext += `- Usu√°rio pediu: "${msg.content}"\n`;
          }
        });
        historyContext += '\nN√ÉO desfa√ßa essas altera√ß√µes anteriores. Adicione a nova modifica√ß√£o preservando o que j√° foi feito.\n';
      }

      const content: Array<{type: 'text' | 'image_url'; text?: string; image_url?: {url: string}}> = [
        {
          type: 'text',
          text: `C√ìDIGO HTML ATUAL COMPLETO:\n${currentCode}\n\nINSTRU√á√ÉO DE ALTERA√á√ÉO (execute imediatamente): ${prompt}${historyContext}`
        }
      ];

      if (hasImages) {
        content.push({
          type: 'text',
          text: '\n\nImagens fornecidas pelo usu√°rio (integre-as conforme solicitado):'
        });
        
        images.forEach((image: string, index: number) => {
          content.push({
            type: 'image_url',
            image_url: { url: image }
          });
          content.push({
            type: 'text',
            text: `Imagem ${index + 1} (use esta imagem conforme a instru√ß√£o do usu√°rio)`
          });
        });
      }

      content.push({
        type: 'text',
        text: '\nRetorne o HTML completo modificado agora:'
      });

      messages = [
        {
          role: 'system',
          content: `Voc√™ √© um desenvolvedor JavaScript especialista. REGRAS CR√çTICAS PARA EDI√á√ÉO:

1. Receba o c√≥digo HTML monol√≠tico atual completo
2. Leia o hist√≥rico de modifica√ß√µes para entender o contexto
3. Identifique EXATAMENTE a parte espec√≠fica que o usu√°rio quer alterar AGORA
4. Fa√ßa APENAS a altera√ß√£o solicitada na mensagem atual
5. PRESERVE todas as altera√ß√µes anteriores do hist√≥rico
6. N√ÉO desfa√ßa mudan√ßas que j√° foram aplicadas
7. N√ÉO adicione recursos extras n√£o solicitados
8. SEMPRE retorne o arquivo HTML completo funcional
9. Se for mudar "um bot√£o", mude APENAS aquele bot√£o espec√≠fico mencionado
10. Se imagens forem fornecidas, integre-as conforme a instru√ß√£o

IMPORTANTE - SEJA CIR√öRGICO:
- Se o usu√°rio pedir para mudar a cor de UM bot√£o, mude APENAS esse bot√£o
- Se pedir para adicionar UM elemento, adicione APENAS esse elemento
- N√ÉO reorganize, refatore ou "melhore" c√≥digo que n√£o foi mencionado
- Quando em d√∫vida, fa√ßa MENOS, n√£o mais

FORMATO DE RESPOSTA OBRIGAT√ìRIO:
- Retorne APENAS o c√≥digo HTML puro
- N√ÉO use blocos de c√≥digo markdown (sem \`\`\`html ou \`\`\`)
- N√ÉO adicione explica√ß√µes, coment√°rios ou texto adicional
- N√ÉO fa√ßa perguntas - sempre execute a altera√ß√£o solicitada
- Sua resposta deve come√ßar diretamente com <!DOCTYPE html> e terminar com </html>`
        },
        {
          role: 'user',
          content: content
        }
      ];
    } else {
      const content: Array<{type: 'text' | 'image_url'; text?: string; image_url?: {url: string}}> = [
        {
          type: 'text',
          text: `Crie um website completo HTML monol√≠tico para: ${prompt}`
        }
      ];

      if (hasImages) {
        content.push({
          type: 'text',
          text: '\n\nImagens fornecidas pelo usu√°rio (integre-as no c√≥digo HTML):'
        });
        
        images.forEach((image: string, index: number) => {
          content.push({
            type: 'image_url',
            image_url: { url: image }
          });
          content.push({
            type: 'text',
            text: `Imagem ${index + 1} (integre esta imagem no HTML usando a tag <img> com src como data URL)`
          });
        });
      }

      messages = [
        {
          role: 'system',
          content: `Voc√™ √© um desenvolvedor JavaScript especialista. Regras OBRIGAT√ìRIAS:

1. SEMPRE escreva c√≥digo JavaScript MONOLITO (arquivo HTML √∫nico)
2. Estrutura obrigat√≥ria:
   - HTML completo com DOCTYPE
   - CSS dentro de <style> no <head>
   - JavaScript dentro de <script> antes do </body>
3. Sempre forne√ßa c√≥digo completo funcional
4. Use apenas HTML, CSS e JavaScript vanilla
5. Se imagens forem fornecidas, integre-as diretamente no HTML usando as data URLs fornecidas

FORMATO DE RESPOSTA OBRIGAT√ìRIO:
- Retorne APENAS o c√≥digo HTML puro
- N√ÉO use blocos de c√≥digo markdown (sem \`\`\`html ou \`\`\`)
- N√ÉO adicione explica√ß√µes, coment√°rios ou texto adicional
- N√ÉO use JSON ou qualquer outro formato
- Sua resposta deve come√ßar diretamente com <!DOCTYPE html> e terminar com </html>`
        },
        {
          role: 'user',
          content: content
        }
      ];
    }

    console.log('üîë Using API key (first 10 chars):', profile.openrouter_api_key.substring(0, 10) + '...');
    
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${profile.openrouter_api_key}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': Deno.env.get('SUPABASE_URL') ?? '',
        'X-Title': 'CoderIA'
      },
      body: JSON.stringify({
        model: selectedModel,
        messages,
        temperature: 0.4,
        max_tokens: 4000,
        top_p: 0.8,
        stream: true
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå OpenRouter API error:', response.status, errorText);
      
      let errorMessage = `OpenRouter API error: ${response.status}`;
      try {
        const errorData = JSON.parse(errorText);
        if (errorData.error?.message) {
          errorMessage = errorData.error.message;
        }
      } catch (e) {
        // Keep original error message
      }
      
      // Special handling for 401 errors
      if (response.status === 401) {
        errorMessage = 'Chave API inv√°lida ou expirada. Por favor, verifique sua chave OpenRouter nas configura√ß√µes.';
      }
      
      return new Response(
        JSON.stringify({ error: errorMessage }),
        { status: response.status, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log('‚úÖ Streaming response from OpenRouter');

    return new Response(response.body, {
      headers: {
        ...corsHeaders,
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
      },
    });

  } catch (error) {
    console.error('‚ùå Error in openrouter-generate:', error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : 'Unknown error' }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});

