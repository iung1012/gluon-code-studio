interface GLMMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface GLMResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
}

export class GLMApiService {
  private apiKey: string;
  private baseUrl = 'https://api.z.ai/api/paas/v4/chat/completions';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  async generateProjectStructure(prompt: string): Promise<string> {
    const messages: GLMMessage[] = [
      {
        role: 'system',
        content: `Voc√™ √© um desenvolvedor JavaScript especialista. Regras OBRIGAT√ìRIAS:

1. SEMPRE escreva c√≥digo JavaScript MONOLITO (arquivo HTML √∫nico)
2. Estrutura obrigat√≥ria:
   - HTML completo com DOCTYPE
   - CSS dentro de <style> no <head>
   - JavaScript dentro de <script> antes do </body>
3. Sempre forne√ßa c√≥digo completo funcional
4. Use apenas HTML, CSS e JavaScript vanilla

IMPORTANTE: Retorne APENAS o c√≥digo HTML completo, sem JSON, sem explica√ß√µes, sem formata√ß√£o adicional. Apenas o c√≥digo HTML puro que funciona diretamente no navegador.`
      },
      {
        role: 'user',
        content: `Crie um website completo HTML monol√≠tico para: ${prompt}`
      }
    ];

    return this.callAPI(messages, 0.3, 6000);
  }

  async editSpecificPart(currentCode: string, editRequest: string): Promise<string> {
    const messages: GLMMessage[] = [
      {
        role: 'system',
        content: `Voc√™ √© um desenvolvedor JavaScript especialista. REGRAS CR√çTICAS:

1. Receba o c√≥digo HTML monol√≠tico atual completo
2. Identifique EXATAMENTE a parte que o usu√°rio quer alterar
3. Fa√ßa APENAS a altera√ß√£o solicitada
4. Mantenha TODO o resto do c√≥digo EXATAMENTE igual
5. Retorne o arquivo HTML completo com APENAS a mudan√ßa espec√≠fica

IMPORTANTE: Retorne APENAS o c√≥digo HTML completo, sem JSON, sem explica√ß√µes, sem formata√ß√£o adicional. Apenas o c√≥digo HTML puro que funciona diretamente no navegador.`
      },
      {
        role: 'user',
        content: `C√ìDIGO ATUAL:\n${currentCode}`
      },
      {
        role: 'user',
        content: `ALTERA√á√ÉO ESPEC√çFICA: ${editRequest}`
      }
    ];

    return this.callAPI(messages, 0.1, 8000);
  }

  private async callAPI(messages: GLMMessage[], temperature: number, maxTokens: number): Promise<string> {
    console.log('üöÄ Calling GLM API with:', { temperature, maxTokens, messagesCount: messages.length });
    
    try {
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Accept-Language': 'en-US,en',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'glm-4-32b-0414-128k',
          messages,
          temperature,
          max_tokens: maxTokens,
          top_p: 0.7,
          frequency_penalty: 0.0,
          presence_penalty: 0.0
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå GLM API error response:', errorText);
        throw new Error(`GLM API error: ${response.status} ${response.statusText}`);
      }

      const data: GLMResponse = await response.json();
      console.log('‚úÖ GLM API response received:', { 
        hasChoices: !!data.choices,
        choicesCount: data.choices?.length || 0
      });
      
      if (!data.choices || data.choices.length === 0) {
        throw new Error('No response from GLM API');
      }

      const content = data.choices[0].message.content;
      console.log('üìÑ Content preview:', content.substring(0, 200) + '...');
      
      return content;
    } catch (error) {
      console.error('‚ùå Error calling GLM API:', error);
      throw error;
    }
  }
}