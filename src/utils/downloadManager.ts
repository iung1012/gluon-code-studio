import { ProjectFile } from "@/services/advancedCodeGenerator";

export class DownloadManager {
  
  static async downloadProject(files: ProjectFile[], projectName: string = "website-project") {
    try {
      // Create a zip file using JSZip
      const JSZip = (await import('jszip')).default;
      const zip = new JSZip();

      // Add files to zip
      this.addFilesToZip(zip, files);

      // Add package.json if not exists
      if (!files.some(f => f.name === 'package.json')) {
        const packageJson = this.generatePackageJson(projectName);
        zip.file('package.json', packageJson);
      }

      // Add README.md
      const readme = this.generateReadme(projectName, files);
      zip.file('README.md', readme);

      // Generate and download zip
      const blob = await zip.generateAsync({ type: 'blob' });
      this.downloadBlob(blob, `${projectName}.zip`);

    } catch (error) {
      console.error('Error downloading project:', error);
      throw new Error('Erro ao fazer download do projeto');
    }
  }

  private static addFilesToZip(zip: any, files: ProjectFile[], basePath: string = '') {
    files.forEach(file => {
      const filePath = basePath ? `${basePath}/${file.name}` : file.name;
      
      if (file.type === 'folder' && file.children) {
        // Create folder and add children
        const folder = zip.folder(filePath);
        this.addFilesToZip(folder, file.children);
      } else if (file.type === 'file' && file.content) {
        // Add file content
        zip.file(filePath, file.content);
      }
    });
  }

  private static generatePackageJson(projectName: string): string {
    const packageJson = {
      name: projectName.toLowerCase().replace(/\s+/g, '-'),
      version: "1.0.0",
      description: "Website generated with AI",
      main: "index.html",
      scripts: {
        start: "npx serve .",
        dev: "npx live-server .",
        build: "echo 'Build not needed for static site'"
      },
      devDependencies: {
        "serve": "^14.2.0",
        "live-server": "^1.2.2"
      },
      keywords: ["website", "html", "css", "javascript", "ai-generated"],
      author: "Generated by AI",
      license: "MIT"
    };

    return JSON.stringify(packageJson, null, 2);
  }

  private static generateReadme(projectName: string, files: ProjectFile[]): string {
    const hasNodeJs = files.some(f => f.name === 'server.js' || f.name.includes('server'));
    const hasPackageJson = files.some(f => f.name === 'package.json');

    return `# ${projectName}

Este projeto foi gerado automaticamente com IA e contém um site completo com HTML, CSS e JavaScript modernos.

## Estrutura do Projeto

\`\`\`
${this.generateFileTree(files)}
\`\`\`

## Como usar

### Opção 1: Servir arquivos estáticos
\`\`\`bash
# Instalar dependências
npm install

# Executar servidor local
npm start
# ou
npm run dev
\`\`\`

### Opção 2: Servidor HTTP simples
\`\`\`bash
# Python 3
python -m http.server 8000

# Python 2  
python -m SimpleHTTPServer 8000

# Node.js
npx serve .
\`\`\`

${hasNodeJs ? `### Opção 3: Servidor Node.js
\`\`\`bash
# Instalar dependências do Node.js
npm install express

# Executar servidor
node server.js
\`\`\`
` : ''}

## Recursos Incluídos

- ✅ HTML5 semântico
- ✅ CSS moderno com custom properties
- ✅ JavaScript ES6+ modular
- ✅ Design responsivo
- ✅ Temas dark/light
- ✅ Acessibilidade (ARIA)
- ✅ SEO otimizado
${hasNodeJs ? '- ✅ Backend Node.js/Express' : ''}

## Personalização

Todos os arquivos foram criados para serem facilmente personalizados:

- **CSS**: Modifique as custom properties em \`:root\` para alterar cores e estilos
- **JavaScript**: Código modular para fácil extensão
- **HTML**: Estrutura semântica e acessível

## Suporte

Este projeto foi gerado com IA e pode ser modificado livremente conforme suas necessidades.

---
*Gerado automaticamente em ${new Date().toLocaleString('pt-BR')}*
`;
  }

  private static generateFileTree(files: ProjectFile[], indent: string = ''): string {
    let tree = '';
    files.forEach(file => {
      tree += `${indent}${file.name}${file.type === 'folder' ? '/' : ''}\n`;
      if (file.type === 'folder' && file.children) {
        tree += this.generateFileTree(file.children, indent + '  ');
      }
    });
    return tree;
  }

  static downloadSingleFile(content: string, filename: string, mimeType: string = 'text/plain') {
    const blob = new Blob([content], { type: mimeType });
    this.downloadBlob(blob, filename);
  }

  private static downloadBlob(blob: Blob, filename: string) {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  static async copyToClipboard(content: string): Promise<void> {
    try {
      await navigator.clipboard.writeText(content);
    } catch (error) {
      // Fallback for older browsers
      const textarea = document.createElement('textarea');
      textarea.value = content;
      textarea.style.position = 'fixed';
      textarea.style.opacity = '0';
      document.body.appendChild(textarea);
      textarea.select();
      document.execCommand('copy');
      document.body.removeChild(textarea);
    }
  }
}